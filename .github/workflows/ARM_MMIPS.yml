name: Patch Mikrotik RouterOS 7.x ARM MMIPS
on:
  # push:
  #   branches: [ "main" ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

env:
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  CUSTOM_CLOUD_PUBLIC_KEY: ${{ secrets.CUSTOM_CLOUD_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  MIKRO_NPK_SIGN_PUBLIC_LKEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_LKEY }}
  MIKRO_CLOUD_PUBLIC_KEY: ${{ secrets.MIKRO_CLOUD_PUBLIC_KEY }}
  MIKRO_LICENCE_URL: ${{ secrets.MIKRO_LICENCE_URL }}
  CUSTOM_LICENCE_URL: ${{ secrets.CUSTOM_LICENCE_URL }}
  MIKRO_UPGRADE_URL: ${{ secrets.MIKRO_UPGRADE_URL }}
  CUSTOM_UPGRADE_URL: ${{ secrets.CUSTOM_UPGRADE_URL }}
  MIKRO_RENEW_URL: ${{ secrets.MIKRO_RENEW_URL }}
  CUSTOM_RENEW_URL: ${{ secrets.CUSTOM_RENEW_URL }}
  MIKRO_CLOUD_URL: ${{ secrets.MIKRO_CLOUD_URL }}
  CUSTOM_CLOUD_URL: ${{ secrets.CUSTOM_CLOUD_URL }}


jobs:
  Set_BuildTime:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_buildtime.outputs.BUILD_TIME }}
    steps:
      - name: Set build time
        id: set_buildtime
        run: echo "BUILD_TIME=$(date +'%s')" >> $GITHUB_OUTPUT

  Patch_RouterOS:
    needs: Set_BuildTime
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86]
        channel: [stable]
    env:
      TZ: 'Asia/Shanghai'
      LATEST_VERSION: ""
      ARCH: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Get latest routeros version
      id: get_latest
      run: |
        echo $(uname -a)
        LATEST_VERSION=$(wget -nv -O - https://${{ env.MIKRO_UPGRADE_URL }}/routeros/NEWESTa7.${{ matrix.channel }} | cut -d ' ' -f1)
        echo Latest Version:$LATEST_VERSION
        if [ "${{ github.event_name }}" == "schedule" ]; then
          _LATEST_VERSION=$(wget -nv -O - https://${{ env.CUSTOM_UPGRADE_URL }}/routeros/NEWESTa7.${{ matrix.channel }} | cut -d ' ' -f1)
          if [ "$_LATEST_VERSION" == "$LATEST_VERSION" ]; then
            echo "No new version found"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        BUILD_TIME=${{ needs.Set_BuildTime.outputs.BUILD_TIME }}
        echo Build Time:$BUILD_TIME
        wget -nv -O CHANGELOG https://${{ env.MIKRO_UPGRADE_URL }}/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        if [ "${{ matrix.arch }}" == "x86" ]; then
          ARCH=''
          echo "ARCH=$ARCH" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          ARCH='-arm64'
          echo "ARCH=$ARCH" >> $GITHUB_ENV
        fi

    - name: Cache Squashfs
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache-squashfs
      uses: actions/cache@v4
      with:
        path: |
          python3.sfs
          option.sfs
        key: busybox-python3-squashfs-${{ matrix.arch }}

    - name: Create Squashfs for option and python3
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache-squashfs.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p ./option-root/bin/
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo cp busybox/busybox_x86 ./option-root/bin/busybox
          sudo chmod +x ./option-root/bin/busybox
          sudo cp keygen/keygen_x86 ./option-root/bin/keygen
          sudo chmod +x ./option-root/bin/keygen
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          sudo cp busybox/busybox_aarch64 ./option-root/bin/busybox
          sudo chmod +x ./option-root/bin/busybox
          sudo cp keygen/keygen_aarch64 ./option-root/bin/keygen
          sudo chmod +x ./option-root/bin/keygen
        fi
        sudo chmod +x ./busybox/busybox_x86
        COMMANDS=$(./busybox/busybox_x86 --list)
        for cmd in $COMMANDS; do
            sudo ln -sf /pckg/option/bin/busybox ./option-root/bin/$cmd
        done
        sudo mksquashfs option-root option.sfs -quiet -comp xz -no-xattrs -b 256k
        sudo rm -rf option-root
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo wget -O cpython-3.11.9.tar.gz -nv https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.11.9+20240713-x86_64-unknown-linux-gnu-install_only.tar.gz
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          sudo wget -O cpython-3.11.9.tar.gz -nv https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.11.9+20240713-aarch64-unknown-linux-gnu-install_only.tar.gz
        fi
        sudo tar -xf cpython-3.11.9.tar.gz
        sudo rm cpython-3.11.9.tar.gz
        sudo rm -rf ./python/include
        sudo rm -rf ./python/share
        sudo mksquashfs python python3.sfs -quiet -comp xz -no-xattrs -b 256k
        sudo rm -rf ./python

    - name: Cache NetInstall ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      id: cache-netinstall
      uses: actions/cache@v4
      with:
        path: |
          netinstall.zip
          netinstall.tar.gz
        key: netinstall-${{ env.LATEST_VERSION }}

    - name: Get netinstall ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86' && steps.cache-netinstall.outputs.cache-hit != 'true'
      run: |
        sudo wget -nv -O netinstall.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/netinstall-$LATEST_VERSION.zip
        sudo wget -nv -O netinstall.tar.gz https://download.mikrotik.com/routeros/$LATEST_VERSION/netinstall-$LATEST_VERSION.tar.gz

    - name: Patch netinstall ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      run: |
        sudo unzip netinstall.zip
        sudo -E python3 patch.py netinstall netinstall.exe
        sudo zip netinstall-$LATEST_VERSION.zip ./netinstall.exe
        sudo tar -xvf netinstall.tar.gz
        sudo -E python3 patch.py netinstall netinstall-cli
        sudo tar -czvf netinstall-$LATEST_VERSION.tar.gz ./netinstall-cli

    - name: Get and Patch routeros-${{ env.LATEST_VERSION }}-arm.npk
      run: |
        sudo wget -nv -O routeros-$LATEST_VERSION-arm.npk https://download.mikrotik.com/routeros/$LATEST_VERSION/routeros-$LATEST_VERSION-arm.npk
        sudo wget -nv -O routeros-$LATEST_VERSION-mmips.npk https://download.mikrotik.com/routeros/$LATEST_VERSION/routeros-$LATEST_VERSION-mmips.npk

        sudo wget -nv -O routeros-$LATEST_VERSION-arm.npk https://download.mikrotik.com/routeros/7.6/routeros-7.6-arm.npk
        sudo wget -nv -O routeros-$LATEST_VERSION-mmips.npk https://download.mikrotik.com/routeros/7.6/routeros-7.6-mmips.npk

        sudo -E python3 patch.py npk routeros-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign routeros-$LATEST_VERSION-arm.npk routeros-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk routeros-$LATEST_VERSION-mmips.npk
        sudo -E python3 npk.py sign routeros-$LATEST_VERSION-mmips.npk routeros-$LATEST_VERSION-mmips.npk

        sudo -E python3 patch.py npk routeros-7.6-arm.npk
        sudo -E python3 npk.py sign rrouteros-7.6-arm.npk routeros-7.6-arm.npk
        sudo -E python3 patch.py npk routeros-7.6-mmips.npk
        sudo -E python3 npk.py sign routeros-7.6-mmips.npk routeros-7.6-mmips.npk


    - name: Get and Patch allpackage-arm ${{ env.LATEST_VERSION }}
      run: |
        sudo wget -nv -O all_packages-arm-$LATEST_VERSION.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/all_packages-arm-$LATEST_VERSION.zip
        sudo unzip all_packages-arm-$LATEST_VERSION.zip
        sudo -E python3 patch.py npk wifi-qcom-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk rose-storage-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk wifi-qcom-ac-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk wireless-$LATEST_VERSION-arm.npk      
        sudo -E python3 patch.py npk dude-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk zerotier-$LATEST_VERSION-arm.npk     
        sudo -E python3 patch.py npk iot-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk user-manager-$LATEST_VERSION-arm.npk    
        sudo -E python3 patch.py npk tr069-client-$LATEST_VERSION-arm.npk        
        sudo -E python3 patch.py npk container-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk ups-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk gps-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk calea-$LATEST_VERSION-arm.npk
        sudo -E python3 patch.py npk lora-$LATEST_VERSION-arm.npk
        
        sudo -E python3 npk.py sign wifi-qcom-$LATEST_VERSION-arm.npk wifi-qcom-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign rose-storage-$LATEST_VERSION-arm.npk rose-storage-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign wifi-qcom-ac-$LATEST_VERSION-arm.npk wifi-qcom-ac-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign wireless-$LATEST_VERSION-arm.npk wireless-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign dude-$LATEST_VERSION-arm.npk dude-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign zerotier-$LATEST_VERSION-arm.npk zerotier-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign iot-$LATEST_VERSION-arm.npk iot-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign user-manager-$LATEST_VERSION-arm.npk user-manager-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign tr069-client-$LATEST_VERSION-arm.npk tr069-client-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign container-$LATEST_VERSION-arm.npk container-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign ups-$LATEST_VERSION-arm.npk ups-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign gps-$LATEST_VERSION-arm.npk gps-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign calea-$LATEST_VERSION-arm.npk calea-$LATEST_VERSION-arm.npk
        sudo -E python3 npk.py sign lora-$LATEST_VERSION-arm.npk lora-$LATEST_VERSION-arm.npk
        
        sudo zip all_packages-arm-$LATEST_VERSION.zip ./*-arm.npk
        



    - name: Delete Release tag ${{ env.LATEST_VERSION }} ${{ matrix.arch }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        RELEASE_INFO=$(curl -s -H $HEADER https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_VERSION$ARCH)
        RELEASE_ID=$(echo $RELEASE_INFO | jq -r '.id')
        echo "Release ID: $RELEASE_ID"
        if [ "$RELEASE_ID" != "null" ]; then
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$LATEST_VERSION$ARCH
            echo "Tag $LATEST_VERSION$ARCH deleted successfully."
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            echo "Release with tag $LATEST_VERSION$ARCH deleted successfully."
        else
            echo "Release not found for tag: $LATEST_VERSION)"
        fi

    - name: Create Release tag ${{ env.LATEST_VERSION }} ${{ matrix.arch }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }} ${{ matrix.arch }}"
        body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}${{ env.ARCH }}
        make_latest:  ${{ matrix.channel == 'stable'}} && ${{ matrix.arch == 'ARM'}}
        files: |
        
         
          netinstall-${{ env.LATEST_VERSION }}.*
          routeros-${{ env.LATEST_VERSION }}-arm.npk
          routeros-${{ env.LATEST_VERSION }}-mmips.npk
          routeros-7.6-arm.npk
          routeros-7.6-mmips.npk
          all_packages-arm-$LATEST_VERSION.zip
